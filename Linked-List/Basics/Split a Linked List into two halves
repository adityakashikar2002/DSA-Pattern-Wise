/* Node of a linked list
 class Node {
   int data;
    Node next;
    Node(int d)  { data = d;  next = null; }
}
*/

class Solution {
    public Pair<Node, Node> splitList(Node head) {
        if (head == null) return new Pair<>(null, null);

        Node slow = head;
        Node fast = head;


        // Step 2: Find middle using slow and fast pointers 
        while (fast.next != head && fast.next.next != head) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Step 3: Fix fast pointer for even number of nodes
        if (fast.next.next == head) {
            fast = fast.next;
        }

        // Step 4: Create the two halves
        Node head1 = head;
        Node head2 = slow.next;

        // Step 5: Make two circular lists using tail and slow
        slow.next = head1;
        fast.next = head2;

        return new Pair<>(head1, head2);
    }
}
