// Brute Force -
// Time: O(2n) ~ O(n)
// Space: O(1)
----------------------------------------------------------------------------------------------------------------------------
/*
class Node
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
}
*/

class Solution {
    public static Node findKthNode(Node node, int k)
    {
        int val = 1;
        
        while(node != null && val != k)
        {
            node = node.next;
            val++;
        }
        
        return node;
    }
    
    public static Node reverseLL(Node node)
    {
        Node curr = node;
        Node prev = null;
        Node next = null;
        
        while(curr != null)
        {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        
        return prev;
    }
    
    public Node reverseKGroup(Node head, int k) {
        // code here
        if(head == null)
            return null;
        
        Node temp = head;
        Node prevNode = null;
        Node nextNode = null;
        Node newHead = null;
        Node kthNode = null;
        
        while(temp != null)
        {
            kthNode = findKthNode(temp, k);
            
            // agar kthNode null raha to
            if(kthNode == null)
            {
                Node lastGroupHead = reverseLL(temp); // akshri group ko reverse kro aur
                if(prevNode != null)
                {
                    prevNode.next = lastGroupHead;   // bss point kr do 
                }
                else
                {
                    head = lastGroupHead;  // agar pahle hi kam blocks the to yee new head rahega
                    return head;
                }
                
            }
            
            nextNode = kthNode.next;
            
            kthNode.next = null;
            
            newHead = reverseLL(temp);
            
            if(temp == head)
            {
                head = newHead; // or head = kthNode
            }
            else
            {
                prevNode.next = newHead;
            }
            
            prevNode = temp;
            temp = nextNode;
        }
        
        return head;
    }
}

----------------------------------------------------------------------------------------------------------------------------
// Optimal Approach - Single Pass
// Time: O(n)
// Space: O(1)
----------------------------------------------------------------------------------------------------------------------------
/*
class Node
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
}
*/

/*
    simple idea hai agar bina kthNode find kiye solve krna ho to
    // LL ki len nikalo aur hamesha min(len, k nodes ko reverse kro)
    // bss isse vo har block of size <= k reverse ho jaega
*/
/*
class Node
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
}
*/

class Solution {
    public Node getkthNode(Node head, int k)
    {
        int c = 1;
        
        while(head != null && c != k)
        {
            head = head.next;
            c++;
        }
        
        return head;
    }
    
    public Node reverseLL(Node head)
    {
        Node curr = head;
        Node prev = null;
        Node next = null;
        
        while(curr != null)
        {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        
        return prev;
    }
    
    public Node reverseKGroup(Node head, int k) {
        // code here
        if(head == null || head.next == null || k == 0)
            return head;
        
        Node temp = head;
        Node prevNode = null;
        Node nextNode = null;
        
        while(temp != null)
        {   
            Node kthNode = getkthNode(temp, k);
            
            if(kthNode == null)
            {
                Node newHead = reverseLL(temp);
                
                if(prevNode == null) 
                    return newHead;
                    
                prevNode.next = newHead;
                break;
            }
            
            nextNode = kthNode.next;
            kthNode.next = null;
            
            Node newHead = reverseLL(temp);
            
            if(temp == head)
            {
                head = kthNode;
            }
            else
            {
                prevNode.next = newHead;
            }
            
            prevNode = temp;
            temp = nextNode;
        }
        
        
        return head;
    }
}
