// Time: O(n logn)
// Space: O(logn)
-------------------------------------------------------------------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public static ListNode getMid(ListNode node)
    {
        
        ListNode slow = node;
        ListNode fast = node.next;  // taki even lengths k liye hamesha 1st middle ko point krega

        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow; // yee hamesha mid of LL ko point krega 

    }

    public static ListNode merge(ListNode head1, ListNode head2)
    {
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;

        while(head1 != null && head2 != null)
        {
            if(head1.val <= head2.val)
            {
                temp.next = head1;
                head1 = head1.next;
            }
            else
            {
                temp.next = head2;
                head2 = head2.next;
            }

            temp = temp.next;
        }

        if(head1 != null)
        {
            temp.next = head1;
        }

        if(head2 != null)
        {
            temp.next = head2;
        }

        return dummy.next;
    }

    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null)
            return head;
        
        ListNode mid = getMid(head);
        ListNode right = mid.next;
        mid.next = null; // yee imp step hai

        ListNode head1 = sortList(head); // left part
        ListNode head2 = sortList(right); // right part

        return merge(head1, head2);
    }
}
