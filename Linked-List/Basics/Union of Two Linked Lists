Metric	                 ArrayList Direct	Optimized (using HashSet)
Time Complexity	O((n + m)^2)	O((n + m) log(n + m))
Space Complexity	O(n + m)	                  O(n + m)
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
// Brute Force - Use ArrayList Direct

class Solution {
    public static Node findUnion(Node head1, Node head2) {
        // Add your code here.
        Node temp = head1;
        List<Integer> list = new ArrayList<>();
        
        while(temp != null)
        {
            if(!list.contains(temp.data))
                list.add(temp.data);
            
            temp = temp.next;
        }
        
        temp = head2;
        
        while(temp != null)
        {
            if(!list.contains(temp.data))
                list.add(temp.data);
            
            temp = temp.next;
        }
        
        list.sort(null);
        
        Node dummy = new Node(-1);
        
        temp = dummy;
        
        for(int i=0; i < list.size(); i++)
        {
            Node newNode = new Node(list.get(i));
            temp.next = newNode;
            temp = newNode;
        }
        
        return dummy.next;
        
    }
}

-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
// Optimized - Use Set then convert to ArrayList

class Solution {
    public static Node findUnion(Node head1, Node head2) {
        // Add your code here.
        Node temp = head1;
        Set<Integer> set = new HashSet<>();
        
        while(temp != null)
        {
            set.add(temp.data);
            temp = temp.next;
        }
        
        temp = head2;
        
        while(temp != null)
        {
            set.add(temp.data);
            temp = temp.next;
        }
        
        ArrayList<Integer> list = new ArrayList<>(set);
        
        list.sort(null); // or Collections.sort(list);
        
        Node dummy = new Node(-1);
        
        temp = dummy;
        
        for(int i=0; i < list.size(); i++)
        {
            Node newNode = new Node(list.get(i));
            temp.next = newNode;
            temp = newNode;
        }
        
        return dummy.next;
        
    }
}
