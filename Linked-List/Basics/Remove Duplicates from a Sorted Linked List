/*
class Node
    {
        int data;
        Node next;
        Node(int d) {data = d; next = null; }
    }
*/

class Solution {
    // Function to remove duplicates from sorted linked list.
    Node removeDuplicates(Node head) {
        // Your code here
        
        if(head == null)
            return head;
            
        Node prev = head;
        Node curr = head.next;
        
        while(curr != null)
        {
            if(prev.data == curr.data)
                prev.next = curr.next;
            else
                prev = prev.next;
                
            curr = curr.next;
            
        }
        
        return head;
    }
}

------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

// Same but uses Single Pointer

 Leetcode 83. Remove Duplicates from Sorted List

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {

        if(head == null)
            return head;

        ListNode curr = head;

        while(curr != null && curr.next != null)
        {
            if(curr.val == curr.next.val)
                curr.next = curr.next.next;
            else
                curr = curr.next;
        }
        return head;
    }
}
