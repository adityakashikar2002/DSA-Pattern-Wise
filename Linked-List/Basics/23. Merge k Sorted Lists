// Time: O(N logk)
// Space: O(1)
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static ListNode mergeSort(int low, int high, ListNode[] arr)
    {
        if(low >= high)
            return arr[low];
        
        int mid = (low + high) / 2;

        ListNode head1 = mergeSort(low, mid, arr);
        ListNode head2 = mergeSort(mid + 1, high, arr);
        
        return merge(head1, head2);
    }

    public static ListNode merge(ListNode h1, ListNode h2)
    {
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;

        while(h1 != null && h2 != null)
        {
            if(h1.val <= h2.val)
            {
                temp.next = h1;
                h1 = h1.next;
            }
            else
            {
                temp.next = h2;
                h2 = h2.next;
            }

            temp = temp.next;
        }

        if(h1 != null)
            temp.next = h1;

        if(h2 != null)
            temp.next = h2;

        return dummy.next;
    }

    public ListNode mergeKLists(ListNode[] lists) {
        int n = lists.length;

        if(n == 0)
            return null;
        
        int low = 0;
        int high = n - 1;

        ListNode head = mergeSort(low, high, lists);

        return head; 
    }
}
