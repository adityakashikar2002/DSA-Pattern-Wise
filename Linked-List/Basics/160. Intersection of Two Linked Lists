// Brute Force Using Set to store Nodes (REMEMBER WE NEED TO STORE NODES ENTIRELY)
// Time - O(M+N)
// Space - O(M)
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null)
        {
            return null;
        }

        Set<ListNode> set = new HashSet<>();

        ListNode tempA = headA;

        while(tempA != null)
        {
            set.add(tempA);
            tempA = tempA.next;
        }

        ListNode tempB = headB;

        while(tempB != null)
        {
            if(set.contains(tempB))
                return tempB;
            tempB = tempB.next;
        }

        return null;
    }
}

// Better Move Simultaneously by Moving One Pointer D(|Len 1 - Len 2|) times ahead 
// Time - O(M) + O(N) + O(|M−N|) + O(min(M, N)) ⊆ O(M + N)
// Space - O(1)
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int lenA = 0;
        int lenB = 0;

        ListNode tempA = headA;
        ListNode tempB = headB;

        while(tempA != null)
        {
            tempA = tempA.next;
            lenA++;
        }

        while(tempB != null)
        {
            tempB = tempB.next;
            lenB++;
        }

        tempA = headA;
        tempB = headB;

        if(lenB > lenA)
        {
            int d = lenB - lenA;
            while(d > 0)
            {
                tempB = tempB.next;
                d--;
            }
                
        }
        else
        {
            int d = lenA - lenB;

            while(d > 0)
            {
                tempA = tempA.next;
                d--;
            }
                
        }

        while(tempA != null && tempB != null)
        {
            if(tempA == tempB)
                return tempA;

            tempA = tempA.next;
            tempB = tempB.next;
        }

        return null;
    }
}

// Best Move Both Pointers Simultaneously and When One Reaches NULL let it point to opposite LL's Head, this will give D automatically
// Time - O(M + N)
// Space - O(1)
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null && headB == null)
            return null;
        
        ListNode tempA = headA;
        ListNode tempB = headB;

        while(tempA != tempB)
        {
            tempA = tempA.next;
            tempB = tempB.next;

            if(tempA == tempB)
                return tempA;

            if(tempA == null)
                tempA = headB;
            else if(tempB == null)
                tempB = headA;
        }

        return tempA;
    }
}
