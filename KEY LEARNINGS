1) When say Sorted Think of Two Pointers

2) When say return Linked List ( a new one ) use Sentinel Pattern

3) When asked to append to string or create a new resultant String go for StringBuilder beacuse, 
  String concatenation (str = str + s.charAt(i)) creates a new string every time → O(n²) time.
  StringBuilder modifies in-place → O(n) time.

4) Duplicates ? Set or HashSet

5) When asked to find MAX_SUM in Circular Fashion, Remember, MAX_CIRCULAR_SUM (of some subarray) = TOTAL_SUM - MIN_SUM;  (Max Circular Subarray Sum)
   Two cases Sum can be MAX_SUM Kadane's MAXSUM Algo or MAX_CIRCULAR_SUM
   To handle all negative  if(MAX_SUM > 0) return MAX_CIRCULAR_SUM, else MAX_SUM;  

6) When asked to rotate a linked list the last node from left will be at len - k position 1 based indexing

7) Longest Repeating Character concept 
  currWinLen - maxF <= k

  otherwise shrink window, HashMap, or Hash-Array needed

8) An Array is Faster than a HashMap, so where you think of HashMap, try converting to array

9) for sums that are affected by carry as 0/1 sum = x + y + carry.

10) When asked to find subarray sum k remember
    if prefix sum is x and there exists a (prefix_sum - k) sum , then the remaining is k sum, okay use HashMap

11) When asked to return an element of pascal triangle at any row and col, the formula is (row - 1 C col - 1)
    nCr = n! / (r! * (n-r)!)  go, till r positions only for optimization

12) when asked to return row based on zero-based indexing of columns do 
    ans = ans * (row - col)
    ans = ans / col

13) When need to check if any character is AlphaNumeric [^a-zA-Z0-9], use Character.isLetterOrDigit(s.charAt(i))

14) Roman to Integer Conversion (IMP)
    Given a string s representing a Roman numeral, find it's corresponding integer value.
    Roman numerals are formed using the following symbols: I = 1, V = 5, X = 10, L = 50, C = 100, D = 500, and M = 1000.
    Numbers are typically formed by combining these symbols from left to right, adding or subtracting their values based on specific rules.

    How does the conversion work?

    If a smaller value symbol comes before, we subtract. Otherwise, we add.
    In IV, I comes before V and V has a larger value 5. So our result is 5 - 1 = 4.
    In VI, V comes before I and I has a smaller value 1. So our result is 5 + 1 = 6.
    In II, we have same values, so we add and get 1 + 1 = 2
    In case of more than 2 characters, we traverse from left to right and group only when we see a greater value character after a smaller value character. 
    For example MXVII is 1000 + 10 + 5 + 1 + 1 = 1017. And XLVII is (50 - 10) + 5 + 1 + 1 = 47. Note that L is larger and comes after X.
