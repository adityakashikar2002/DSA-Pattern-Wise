Final Time Complexities of QuickSort
Case	Time Complexity	Reason
Best Case	O(n log n)	Balanced partitioning
Average Case	O(n log n)	Random input
Worst Case	O(n^2)	Unbalanced partitioning (e.g. sorted input with bad pivot choice)

| Pivot Position             | Comparison Range                      | Why?                                |
| -------------------------- | --------------------------------------| ----------------------------------- |
| First Element (`arr[low]`) | `i <= high`, `j >= low`, `while(i<j)` | Pivot is out of the way at start    |
| Last Element (`arr[high]`) | `i < j`, `j < high`, `while(i<=j)`    | Need to avoid pivot during scanning |

-------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------
// Approach 1 - SELECTING 1ST ELE AS PIVOT - EASY

import java.util.* ;
import java.io.*; 
public class Solution {
    public static List<Integer> quickSort(List<Integer> arr){
        // Write your code here.
        quickSorthelper(0, arr.size()-1, arr);

        return arr;
    }


    public static void quickSorthelper(int low, int high, List<Integer> arr)
    {
        if(low < high)
        {
            int partitionIndex = partition(low,high,arr);
            quickSorthelper(low, partitionIndex - 1, arr);
            quickSorthelper(partitionIndex + 1, high, arr); 
        }
    }


    public static int partition(int low, int high, List<Integer> arr)
    {
        int i = low;
        int j = high;
        int pivot = arr.get(low);

        while(i < j)
        {
            while(i <= high && arr.get(i) <= pivot)
            {
                i++;
            }

           while(j >= low && arr.get(j) > pivot)
            {
                j--;
            }

            if(i<j)
            {
                int temp = arr.get(i);
                arr.set(i,arr.get(j));
                arr.set(j,temp);
            }

        }

        int temp = arr.get(j);
        arr.set(j, pivot);
        arr.set(low,temp);

        return j;

    }
}

-------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------
// Approach 2 - SELECTING LAST ELE AS PIVOT - TRICKY

class Solution {
    public void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pIndex = partition(arr, low, high);
            quickSort(arr, low, pIndex - 1);
            quickSort(arr, pIndex + 1, high);
        }
    }

    private int partition(int[] arr, int low, int high) {
        int pivot = arr[high];  // Pivot is the last element
        int i = low;
        int j = high - 1;

        while (i <= j) {
            while (i <= j && arr[i] <= pivot) {
                i++;
            }
            while (i <= j && arr[j] > pivot) {
                j--;
            }

            if (i < j) {
                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Finally, swap arr[i] with pivot to place pivot at correct position
        int temp = arr[i];
        arr[i] = arr[high];
        arr[high] = temp;

        return i;  // Return the pivot index
    }
}

