Final Time Complexities of QuickSort
Case	Time Complexity	Reason
Best Case	O(n log n)	Balanced partitioning
Average Case	O(n log n)	Random input
Worst Case	O(n^2)	Unbalanced partitioning (e.g. sorted input with bad pivot choice)
-------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------

import java.util.* ;
import java.io.*; 
public class Solution {
    public static List<Integer> quickSort(List<Integer> arr){
        // Write your code here.
        quickSorthelper(0, arr.size()-1, arr);

        return arr;
    }


    public static void quickSorthelper(int low, int high, List<Integer> arr)
    {
        if(low < high)
        {
            int partitionIndex = partition(low,high,arr);
            quickSorthelper(low, partitionIndex - 1, arr);
            quickSorthelper(partitionIndex + 1, high, arr); 
        }
    }


    public static int partition(int low, int high, List<Integer> arr)
    {
        int i = low;
        int j = high;
        int pivot = arr.get(low);

        while(i < j)
        {
            while(i <= high && arr.get(i) <= pivot)
            {
                i++;
            }

           while(j >= low && arr.get(j) > pivot)
            {
                j--;
            }

            if(i<j)
            {
                int temp = arr.get(i);
                arr.set(i,arr.get(j));
                arr.set(j,temp);
            }

        }

        int temp = arr.get(j);
        arr.set(j, pivot);
        arr.set(low,temp);

        return j;

    }
}

-------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------

