// Brute Force Approach
// Time: O(1)
// Space: O(2 x n)
---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------

/*
    sabse brute force tarika hoga ki stack me as a pair store kro isko
    jisme ek curr val hoga aur vaha tak ka minimum stored hoga
*/
class MinStack {
    Stack<Pair<Integer, Integer>> stack;

    public MinStack() {
        stack = new Stack<>();
    }
    
    public void push(int val) {
        int currentMin;

        if(stack.isEmpty()) // agar stack empty hai to yee pahli val hi min hogi
            currentMin = val;
        else
            currentMin = Math.min(val, stack.peek().getValue()); // nhi to dekhna padega kya
            // ye nayi value ab tak k minimum se badi hai ya choti

        stack.push(new Pair<>(val, currentMin)); // stack me add krenge
    }
    
    public void pop() {
        if(stack.isEmpty())
            return;
        
        stack.pop();
    }
    
    public int top() {
        return stack.peek().getKey();
    }
    
    public int getMin() {
        return stack.peek().getValue();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
// Optimal Approach
// Time: O(1)
// Space: O(n)
---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
