// Brute Force Approach
// Time: O(1)
// Space: O(2 x n)
---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------

/*
    sabse brute force tarika hoga ki stack me as a pair store kro isko
    jisme ek curr val hoga aur vaha tak ka minimum stored hoga
*/
class MinStack {
    Stack<Pair<Integer, Integer>> stack;

    public MinStack() {
        stack = new Stack<>();
    }
    
    public void push(int val) {
        int currentMin;

        if(stack.isEmpty()) // agar stack empty hai to yee pahli val hi min hogi
            currentMin = val;
        else
            currentMin = Math.min(val, stack.peek().getValue()); // nhi to dekhna padega kya
            // ye nayi value ab tak k minimum se badi hai ya choti

        stack.push(new Pair<>(val, currentMin)); // stack me add krenge
    }
    
    public void pop() {
        if(stack.isEmpty())
            return;
        
        stack.pop();
    }
    
    public int top() {
        return stack.peek().getKey();
    }
    
    public int getMin() {
        return stack.peek().getValue();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
// Optimal Approach
// Time: O(1)
// Space: O(n)
---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------

/*
    hum aisa kr skhte ki ek variable me min ka track rakhenge
    jab bhi koi element uss min se kam hoga apn min ko update krenge
    lekin stack me 2 * val - min vali value dalenge
    agar iske baad top ele bola to hum min return krenge
    pop krne bola to dekhenge top < min? if yes to min return krenge
    so on
*/
class MinStack {
    Stack<Long> stack;
    long prevMin;

    public MinStack() {
        stack = new Stack<>();
        prevMin = Long.MAX_VALUE;
    }
    
    public void push(int val) {
        long v = val;
        if(stack.isEmpty()) {
            stack.push(v);
            prevMin = v;
        } else if(v < prevMin) {
            stack.push(2*v - prevMin); // encode
            prevMin = v;
        } else {
            stack.push(v);
        }
    }
    
    public void pop() {
        long top = stack.pop();

        if(top < prevMin) {
            prevMin = 2 * prevMin - top; // restore previous min
        }
    }
    
    public int top() {
        long top = stack.peek();
        return (int)(top < prevMin ? prevMin : top);
    }
    
    public int getMin() {
        return (int)prevMin;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
// Optimal Approach - Linked List Use krk
// Time: O(1)
// Space: O(n)
---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
/*
    hum aisa kr skhte ki ek variable me min ka track rakhenge
    jab bhi koi element uss min se kam hoga apn min ko update krenge
    lekin stack me 2 * val - min vali value dalenge
    agar iske baad top ele bola to hum min return krenge
    pop krne bola to dekhenge top < min? if yes to min return krenge
    so on
*/
class Node
{
    long data;
    Node next;

    Node(long data)
    {
        this.data = data;
        this.next = null;
    }
}

class MinStack {

    Node head;
    long min;

    public MinStack() {
        head = null;
        min = Long.MAX_VALUE;
    }
    
    public void push(int val) {
        Node newNode;
        long v = val;

        if(head == null)
        {
            newNode = new Node(v);
            head = newNode;
            min = v;
        }
        else
        {
            if(v < min)
            {
                newNode = new Node(2 * v - min);
                min = v; // update min
            }
            else
            {
                newNode = new Node(v);
            }

            newNode.next = head;
            head = newNode;
        }
    }
    
    public void pop() {

        if(head == null)
            return;

        long top = head.data;

        if(top < min) // agar min vale ko pop krne ki bari ayi to
        {
            min = 2 * min - top; // restore min
        }

        head = head.next;
    }
    
    public int top() {

        long top = head.data;

        if(top < min)  // agar top poocha
            return (int) min;
        
        return (int) top;

    }
    
    public int getMin() {
        return (int) min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
