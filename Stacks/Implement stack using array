// Time: O(q) ~ each operations takes place in O(1) time
// Space: O(n)
----------------------------------------------------------------------------------------
class myStack {
    int[] stack;
    int top;
    int capacity;
    
    public myStack(int n) {
        this.capacity = n;
        stack = new int[n];
        top = -1;
    }

    public boolean isEmpty() {
        return top == -1;
    }

    public boolean isFull() {
        return top >= capacity - 1;
    }

    public void push(int x) {
        if (!isFull()) 
        {
            stack[++top] = x;
        }
        // else do nothing if stack is full
    }

    public void pop() {
        if (!isEmpty()) 
        {
            top--;
        }
        // else do nothing if stack is empty
    }

    public int peek() {
        if (isEmpty()) 
            return -1;
            
        return stack[top];
    }
}
