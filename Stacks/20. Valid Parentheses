// Time: O(n)
// Space: O(n)
------------------------------------------------------------------------------------------------------------------
class Solution {
    public boolean isValid(String s) {
        char[] charArr = s.toCharArray();

        Stack<Character> st = new Stack<>();

        for(int i = 0; i < charArr.length; i++)
        {
            char ch = charArr[i];
            
            if(ch == '(' || ch == '{' || ch == '[')
                st.push(ch);
            else
            {
                if(st.isEmpty())
                    return false;
                
                char top = st.pop();
                
                if((ch == ')' && top != '(') || (ch == '}' && top != '{') || (ch == ']' && top != '[')) 
                {
                    return false;
                }
            }
        } 

    
        return st.isEmpty();
    }
}

------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
// Time: O(n)
// Space: O(1) ~ Ignoring the space of character array as Strings in Java are immutable
------------------------------------------------------------------------------------------------------------------
/*
    java me strings immutable hai so hum in place operations k liye ek charArray lenge vaha in place stack vala kaam krenge 
*/
class Solution {
    public boolean isBalanced(String s) {
        // code here
        char[] stack = s.toCharArray();
        int top = -1;
        
        for(int i = 0; i < s.length(); i++)
        {
            char ch = stack[i];
            
            if(ch == '(' || ch == '[' || ch == '{')
                stack[++top] = s.charAt(i); // push in stack
            else
            {
                if(top == -1)
                    return false; // empty stack raha to invalid hai
                
                char topStack = stack[top];
                top--; // pop kro
                
                if(ch == ')' && topStack != '(' || ch == ']' && topStack != '[' || ch == '}' && topStack != '{')
                    return false;
                
                
                
            }
        }
        
        return top == -1;
    }
}
