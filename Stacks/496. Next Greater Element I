// Brute Force Approach
// Time: O(n³)
// Space: O(1)
----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
/*
    Brute Force Tarika 
    sabse pahle linear search se durse vale ko dhoodho
    milne k baad vaha se greater ki talash kro
*/
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] ans = new int[nums1.length];

        int n1 = nums1.length;
        int n2 = nums2.length;

        for(int i = 0; i < n1; i++)
        {
            for(int j = 0; j < n2; j++)
            {
                if(nums1[i] == nums2[j]) // match hua to vaha se greater ele dekhenge
                {
                    int greater = -1;

                    for(int k = j + 1; k < n2; k++)
                    {
                        if(nums2[k] > nums2[j])
                        {
                            greater = nums2[k]; // mila to update krk break
                            break;
                        }
                    }

                    ans[i] = greater;
                }
            }
        }

        return ans;
    }
}

----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
// Better Approach
// Time: O(n2² + n1) ≈ O(n2²)
// Space: O(n1 + n2)
----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
/*
    dursa aur asan tarika hoga ki, nums2 k array k har element k greater ko
    advance me find krk ek map me store kr do
    taki jab nums1 se hum scan marenge vo lookup jaldi ho jaega 
*/
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;

        int[] ans = new int[n1];

        HashMap<Integer, Integer> map = new HashMap<>();

        for(int i = 0; i < n2; i++)
        {
            int greater = -1;

            for(int j = i + 1; j < n2; j++)
            {
                if(nums2[j] > nums2[i])
                {
                    greater = nums2[j];
                    break;
                }
            }

            map.put(nums2[i], greater);
        }

        for(int i = 0; i < n1; i++)
        {
            if(map.containsKey(nums1[i]))
            {
                ans[i] = map.get(nums1[i]);
            }
        }

        return ans;
    }
}

----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
// Optimal Approach
// Time: O(n2)
// Space: O(n2 + n1)
----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------

/**
    monotonic stack, forward scan k sath
    [1, 3, 4, 2]
    to 1 push kiya
    3 mila
    1 - 3 ko map me dala

    ab 3 ko push,
    4 mila
    phir 4 ko push,
    kuch nhi mila
    phir bhi push kiya, same for 2
    aur phir jitne stack me bach gaye, unko pop krk -1 ka pair banaya
*/
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;

        int[] ans = new int[n1];

        Stack<Integer> st = new Stack<>();

        HashMap<Integer, Integer> map = new HashMap<>();

        for(int i = 0; i < n2; i++)
        {
            while(!st.isEmpty() && (nums2[i] > st.peek()))
            {   
                map.put(st.pop(), nums2[i]);
            }

            st.push(nums2[i]);
        }

        while(!st.isEmpty())
        {
            map.put(st.pop(), -1);
        }

        for(int i = 0; i < n1; i++)
        {
            if(map.containsKey(nums1[i]))
                ans[i] = map.get(nums1[i]);
        }

        return ans;
    }
}
