// Brute Force
// Time: O(nÂ²)
// Space: O(n)
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
class Solution {
    static ArrayList<Integer> nextSmallerEle(int[] arr) {
        // code here
        int n = arr.length;
        ArrayList<Integer> res = new ArrayList<>();
        
        for(int i = 0; i < n; i++)
        {
            int small = -1;
            boolean found = false;
            
            for(int j = i + 1; j < n; j++)
            {
                if(arr[j] < arr[i])
                {
                    res.add(arr[j]);
                    found = true;
                    break;
                }
                
            }
            
            if(!found)
                res.add(-1);
        }
        
        return res;
    }
}

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
// Optimal Approach
// Time: O(n)
// Space: O(n)
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

class Solution {
    static ArrayList<Integer> nextSmallerEle(int[] arr) {
        // code here
        int n = arr.length;
        ArrayList<Integer> res = new ArrayList<>(Collections.nCopies(n, -1));
        Stack<Integer> st = new Stack<>();
        
        for (int i = 0; i < n; i++) {
            while (!st.isEmpty() && arr[i] < arr[st.peek()]) {
                int idx = st.pop();
                res.set(idx, arr[i]);
            }
            st.push(i);
        }
        
        return res;
    }
}
