// Brute Approach
// Time: O(nÂ²)
// Space: O(n)
---------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public ArrayList<Integer> calculateSpan(int[] arr) {
        // code here
        int n = arr.length;
        
        ArrayList<Integer> res = new ArrayList<>(Collections.nCopies(n, 1));
        
        for(int i = 1; i < n; i++)
        {
            int j = i - 1;
            int span = 1;
            
            while(j >= 0 && arr[j] <= arr[i])
            {
                span++;
                j--;
            }
            
            if(span != 0)
                res.set(i, span);
        }
        
        return res;
    }
}

---------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
// Optimal Approach
// Time: O(n)
// Space: O(n)
---------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
