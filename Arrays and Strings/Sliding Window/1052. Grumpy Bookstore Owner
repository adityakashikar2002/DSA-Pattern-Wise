// Brute Approach
// Time: O(n + n x k) ~ O(n x k)
// Space: O(1)
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
/**
    sabse asan tarika har window of size minutes, k har ek subarray jo ban skhta hai
    usme me kitne customers apn le skhte vo lenge aur final satisfied customers me add krnge

    already satisfied customers pahle nikal lenge sum krk jaha
    grumpy array me 0 hoga vaha
*/
class Solution {
    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {
        int n = grumpy.length;

        int satisfiedCus = 0;

        for(int i = 0; i < n; i++)
        {
            if(grumpy[i] == 0)
            {
                satisfiedCus += customers[i];
            }
        }

        int maxSatCus = satisfiedCus;

        int cusSum = 0;

        for(int i = 0; i <= n - minutes; i++)
        {
            int j = i;
            cusSum = satisfiedCus;

            for(int k = 0; k < minutes; k++)
            {
                if(grumpy[j] == 1)
                {
                    cusSum += customers[j];
                }
                j++;
            }

            maxSatCus = Math.max(maxSatCus, cusSum);
        }

        return maxSatCus;
    }
}
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
// Optimal Approach
// Time: O(n + n) ~ O(n)
// Space O(1)
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

/**
    dusra tarika hoga ki minutes k fixed size window ki tarah hai to hum usko maintain krte hue sum me
    satisfied customers nikal skhte jab window ka size bada ho jaega to shrink kr denge j - minutes se
*/
class Solution {
    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {
        int n = customers.length;

        int satisfiedCustomers = 0;

        for(int i = 0; i < n; i++)
        {
            if(grumpy[i] == 0)
            {
                satisfiedCustomers += customers[i];
            }
        }

        int maxSatisfiedCus = satisfiedCustomers;

        for(int m = 0; m < minutes; m++)
        {
            if(grumpy[m] == 1)
            {
                satisfiedCustomers += customers[m];
            }
        }
        
        maxSatisfiedCus = Math.max(maxSatisfiedCus, satisfiedCustomers);
        
        for(int j = minutes; j < n; j++)
        {
            if(grumpy[j - minutes] == 1)
            {
                satisfiedCustomers -= customers[j - minutes];
            }

            if(grumpy[j] == 1)
            {
                satisfiedCustomers += customers[j];
            }

            maxSatisfiedCus = Math.max(maxSatisfiedCus, satisfiedCustomers);
        }

        return maxSatisfiedCus;
    }
}
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

// maxExtra bhi kr skhte aisa krk
class Solution {
    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {
        int n = customers.length;

        int satisfiedCustomers = 0;

        for(int i = 0; i < n; i++)
        {
            if(grumpy[i] == 0)
            {
                satisfiedCustomers += customers[i];
            }
        }

        int extraSatisfied = 0;

        for(int m = 0; m < minutes; m++)
        {
            if(grumpy[m] == 1)
            {
                extraSatisfied += customers[m];
            }
        }
        
        int maxExtraSatCus = extraSatisfied;
        
        for(int j = minutes; j < n; j++)
        {
            if(grumpy[j - minutes] == 1)
            {
                extraSatisfied -= customers[j - minutes];
            }

            if(grumpy[j] == 1)
            {
                extraSatisfied += customers[j];
            }

            maxExtraSatCus = Math.max(maxExtraSatCus, extraSatisfied);
        }

        return satisfiedCustomers + maxExtraSatCus;
    }
}
