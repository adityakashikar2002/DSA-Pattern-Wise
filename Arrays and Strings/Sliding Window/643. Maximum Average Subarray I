// Brute Approach
// Time: O(n x k)
// Space: O(1)
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------

/**
    sabse easy tarika har k size k subarray ko check kro aur maxSum nikalne ki koshish kro
    jiska subarray ka sum Max hoga, definity uska avg bhi Max hoga  
*/
class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int n = nums.length;
        double maxSum = Double.NEGATIVE_INFINITY;

        for (int i = 0; i <= n - k; i++) 
        {
            int sum = 0;

            for (int j = i; j < i + k; j++) 
            {
                sum += nums[j];
            }

            maxSum = Math.max(maxSum, sum);
        }

        return maxSum / k;
    }
}
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
// Optimal Approach
// Time: O(n)
// Space: O(1)
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
/**
    subarray ka size fixed hai 'k' matlab apn fixed sized Sliding Window approach use kr skhte
    jab bhi window k baher jaega left vala ele minus krenge, naya vala add krenge
*/
class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int n = nums.length;

        int maxSum;

        // sabse pahle k size ka sum nikal lete
        int sum = 0;

        for(int i = 0; i < k; i++)
        {
            sum += nums[i];
        }

        maxSum = sum;

        for(int i = k; i < n; i++)
        {
            sum = sum - nums[i - k] + nums[i]; // prev vala udao aur naya vala add kro
            maxSum = Math.max(maxSum, sum);
        }

        return (double) maxSum / k;
    }
}
