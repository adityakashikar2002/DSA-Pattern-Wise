// Brute Approach
// Time: O(n x k) where n = s2.length() and k = s1.length()
// Space: O(26) ~ O(1)
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
/**
    sabse asan tarika aur brute approach hoga ki
    har ek l1 size k substring ko s2 me hai kya as its permutation check kro

    boolean array leke
*/
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int l1 = s1.length();
        int l2 = s2.length();

        if(l1 > l2)
            return false;
        
        for(int i = 0; i <= l2 - l1; i++)
        {
            String subStr = s2.substring(i, i + l1);
            boolean flag = isPermutation(s1, subStr);

            if(flag)
                return true;
        }

        return false;
        
    }

    public static boolean isPermutation(String s1, String s2)
    {
        int[] freq = new int[26];

        for(int i = 0; i < s1.length(); i++)
        {
            freq[s1.charAt(i) - 'a']++;
            freq[s2.charAt(i) - 'a']--;
        }

        for(int f : freq)
        {
            if(f != 0)
                return false;
        }

        return true;
    }
}
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
// Better Approach
// Time: O(26 x n) ~ O(n)
// Space: O(2 * 26) ~ O(1)
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
/**
    iska best tarika hoga solve krne ka ki 
    s1 ka freq nikal lete
    s2 me fixed size sliding window chalake check krne jab tak window valid hai

    s1 ka freqArray kya s2 k freqArray se match krta if yes hum true retun krenge
*/
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int l1 = s1.length();
        int l2 = s2.length();

        if(l1 > l2)
            return false;

        int[] f1 = new int[26];
        int[] f2 = new int[26];

        int k = l1;

        for(int i = 0; i < k; i++)
        {
            char ch = s1.charAt(i);

            f1[ch - 'a']++;
        }

        for(int i = 0; i < k; i++)
        {
            char ch = s2.charAt(i);

            f2[ch - 'a']++;
        }

        if(Arrays.equals(f1, f2))
            return true;

        for(int i = k; i < l2; i++)
        {
            int prev = s2.charAt(i - k);
            int ch = s2.charAt(i);

            f2[prev - 'a']--;
            f2[ch - 'a']++;

            if(Arrays.equals(f1, f2))
                return true;
        }

        return false;
    }
}
