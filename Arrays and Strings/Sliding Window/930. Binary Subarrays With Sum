// Brute Approach
// Time: O(nÂ²)
// Space: O(1)
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
/**
    brute approach hoga find all subarrays with sum == goal
*/
class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        int n = nums.length;
        int count = 0;

        for(int i = 0; i < n; i++)
        {
            int sum = 0;

            for(int j = i; j < n; j++)
            {
                sum += nums[j];

                if(sum == goal)
                {
                    count++;
                }
            }
        }

        return count;
    }
}

---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
// Better Approach
// Time: O(n)
// Space: O(n)
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
/**
    better solution same count of subarrays with sum k
    jaisa hoga 
*/
class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        int n = nums.length;
        int count = 0;
        int sum = 0;

        HashMap<Integer, Integer> map = new HashMap<>();

        for(int i = 0; i < n; i++)
        {
            
            sum += nums[i];

            if(sum == goal)
                count++;
                
            if(map.containsKey(sum - goal))
            {
                count += map.get(sum - goal);
            }
            
            if(map.containsKey(sum))
            {
                map.put(sum, map.get(sum) + 1);
            }
            else
            {
                map.put(sum, 1);
            }
        }

        return count;
    }
}
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
// Optimal Approach
// Time: O(2n + 2n) ~ O(n + n) ~ O(n)
// Space: O(1)
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
/**
    sabse optimal solution jo binary array pr lg skhta hai vo hai sliding window
    kyuki yaha sum 
    +1 se increase ya -1 se decrease ho skhta do hi cases hai

    so asani say sliding window se kaam ban jaega

    bss hume yee kaam krna hai

    CountSubarraysAtMostSum(goal) - CountSubarraysAtMostSum(goal - 1);

    (sum == goal)  =  (sum <= goal)  - (sum <= goal - 1)
    vale subarrays    vale subarrays    vale subarrays
*/  
class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {

        return atMost(nums, goal) - atMost(nums, goal - 1);
    }

    public static int atMost(int[] arr, int target)
    {

        int n = arr.length;

        int sum = 0;
        int count = 0;

        int l = 0;
        for(int r = 0; r < n; r++)
        {    
            sum += arr[r];
                
            while(sum > target && l <= r)
            {
                sum = sum - arr[l++];
            }

            count += r - l + 1;
        }

        return count;
    }
}
