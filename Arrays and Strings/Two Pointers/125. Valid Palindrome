// Brute Force
// Time: O(n) + O(n) = O(2n)
// Space: O(n)
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
class Solution {
    public boolean isPalindrome(String s) {
        int n = s.length();

        StringBuilder str = new StringBuilder("");

        for(int i = 0; i < n; i++)
        {
            char ch = s.charAt(i);

            if(ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z' || ch >= '0' && ch <= '9')
            {
                str.append(Character.toLowerCase(ch));
            }
        }

        String p = str.toString();

        int i = 0;
        int j = p.length() - 1;

        while(i < j)
        {
            if(p.charAt(i) != p.charAt(j))
                return false;
            
            i++;
            j--;

        }

        return true;
    }
}
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
// Optimal Solution
// Time: O(n)
// Space: O(1)
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
/*
    ek aur tarika hoga ki same string pr operate hoga without creating another string
    koi character AlphaNumeric hoga to Character.isLetterOrDigit()

    to dono taraf se dono pointers move kro jab tak koi Letter ya Digit pr point nhi krta

    to aisa kro

*/
class Solution {
    public boolean isPalindrome(String s) {
        int n = s.length();
        int i = 0;
        int j = n - 1;

        while(i < j)
        {
            while(i < j && !Character.isLetterOrDigit(s.charAt(i)))
            {
                i++;
            }

            while(i < j && !Character.isLetterOrDigit(s.charAt(j)))
            {
                j--;
            }

            if(Character.toLowerCase(s.charAt(i)) != Character.toLowerCase(s.charAt(j)))
                return false;
            
            i++;
            j--;
        }

        return true;
    }
}
