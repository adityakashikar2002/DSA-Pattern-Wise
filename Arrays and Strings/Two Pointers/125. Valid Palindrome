// Brute Force
// Time: O(n) + O(n) = O(2n)
// Space: O(n)
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
class Solution {
    public boolean isPalindrome(String s) {
        int n = s.length();

        StringBuilder str = new StringBuilder("");

        for(int i = 0; i < n; i++)
        {
            char ch = s.charAt(i);

            if(ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z' || ch >= '0' && ch <= '9')
            {
                str.append(Character.toLowerCase(ch));
            }
        }

        String p = str.toString();

        int i = 0;
        int j = p.length() - 1;

        while(i < j)
        {
            if(p.charAt(i) != p.charAt(j))
                return false;
            
            i++;
            j--;

        }

        return true;
    }
}
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
// Optimal Solution
// Time: O()
// Space: O()
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
