// Brute Approach
// Time: O(n³)
// Space: O(1)
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

/**
    sabse brute tarika sare subarrays check kro
*/
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int n = nums.length;

        int minDiff = Integer.MAX_VALUE;

        int closestSum = 0;

        for(int i = 0; i <= n - 3; i++)
        {
            for(int j = i + 1; j <= n - 2; j++)
            {
                for(int k = j + 1; k <= n - 1; k++)
                {
                    int sum = nums[i] + nums[j] + nums[k];
                    int diff = Math.abs(target - sum);

                    if(diff < minDiff)
                    {
                        minDiff = diff;
                        closestSum = sum;
                    }
                }
            }
        }

        return closestSum;
    }
}
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
// Optimal Approach
// Time: O(nlogn + n²) ~ O(n²)
// Space: O(1)
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
/**
    sabse optimal solution to yehi hoga ki array ko sort kr do aur 
    ek value fix kr denge
    aur baki 2 values ko explore krenge 2Sum vale tarike se bss
    jab diff < minDiff hoga tab hum closestSum update krenge
*/
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);

        int n = nums.length;
        int closestSum = 0;
        int minDiff = Integer.MAX_VALUE;

        for (int i = 0; i < n - 2; i++) 
        {
            int left = i + 1;
            int right = n - 1;

            while (left < right) 
            {
                int sum = nums[i] + nums[left] + nums[right];
                int diff = Math.abs(target - sum);

                if (diff < minDiff) 
                {
                    minDiff = diff;
                    closestSum = sum;
                }

                if (sum < target)
                    left++;
                else
                    right--;
            }
        }

        return closestSum;
    }
}
