Think of Two sorted arrays, and we find if there exists an element in array2 that is smaller than the curr_ele of array1
if so, as arrays are sorted, we can say, the ele of array2 is smaller than all elements of array1 that are after curr_ele and itself

example: 
array1 [4, 6, 8]
array2 [2, 3, 7]

as 2 < 4 and array is sorted we can say that 4 > 2, 6 > 2, 8 > 2
so think of merge sort
-----------------------------------------------------------
-----------------------------------------------------------
// Time: O(nlog(n))
// Space: O(n)
-----------------------------------------------------------
class Solution {
    static int mergeSort(int[] a, int low, int high)
    {
        int count = 0;
        
        if(low < high)
        {
            int mid = (low + high) / 2;
            
            count+= mergeSort(a, low, mid);
            count+= mergeSort(a, mid + 1, high);
            count+= merge(a, low, mid, high);
        }
        
        return count;
        
    }
    
    static int merge(int[] a, int low, int mid, int high)
    {
        int count = 0;
        
        int[] temp = new int[high - low + 1];
        
        int i = low;
        int j = mid + 1;
        int k = 0;
        
        while(i <= mid && j <= high)
        {
            if(a[i] <= a[j])
            {
                temp[k] = a[i];
                i++;
                k++;
            }
            else
            {
                temp[k] = a[j];
                j++;
                k++;
                
                count += (mid - i + 1);
            }
        }
        
        while(i <= mid)
        {
            temp[k++] = a[i++];
        }
        
        while(j <= high)
        {
            temp[k++] = a[j++];
        }
        
        
        for (k = 0; k < temp.length; k++)
        {
            a[low + k] = temp[k];
        }
        
        return count;
    }
    
    static int inversionCount(int arr[]) {
        
        int count = 0;
        int low = 0;
        int high = arr.length - 1;
        
        count = mergeSort(arr, low, high);
        
        return count;
        
    }
}
