// Brute Force Solution
Time Complexity: O(m + n) — for merging the two arrays
Space Complexity: O(m + n) — for the res array

-----------------------------------------------------------------------
-----------------------------------------------------------------------

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length;
        int len2 = nums2.length;

        if(len1 == 0 && len2 == 0)
            return 0.0;
        
        int n = len1 + len2;

        int[] res = new int[n];
        int k = 0;

        int count = 0;

        int i = 0;
        int j = 0;

        while(i < len1 && j < len2)
        {
            if(nums1[i] <= nums2[j])
            {
                res[k++] = nums1[i];
                i++;
            }
            else
            {
                res[k++] = nums2[j];
                j++;
            }
        }

        while(i < len1)
        {
            res[k++] = nums1[i++];
        }

        while(j < len2)
        {
            res[k++] = nums2[j++];
        }

        double n1 = -1.0;
        double n2 = -1.0;

        for(i = 0; i < n; i++)
        {
            if(i == n/2 - 1)
                n1 = (double) res[i];
            else if(i == n/2)
                n2 = (double) res[i];
        }

        if(n % 2 == 1)
            return n2;
        
        return (n1 + n2) / 2.0;
    }
}

-----------------------------------------------------------------------
-----------------------------------------------------------------------

// Better Solution
Time Complexity: O(m + n)
Space Complexity: O(1) 

-----------------------------------------------------------------------
-----------------------------------------------------------------------

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length;
        int len2 = nums2.length;

        int n = len1 + len2;

        int count = 0;

        int i = 0;
        int j = 0;

        double n1 = -1.0;
        double n2 = -1.0;

        while(i < len1 && j < len2)
        {
            if(nums1[i] <= nums2[j])
            {
                if(count == n/2 - 1)
                    n1 = (double) nums1[i];
                else if(count == n/2)
                    n2 = (double) nums1[i];
                
                i++;
            }
            else
            {
                if(count == n/2 - 1)
                    n1 = (double) nums2[j];
                else if(count == n/2)
                    n2 = (double) nums2[j];
                
                j++;
            }

            count++;
        }

        while(i < len1)
        {
            if(count == n/2 - 1)
                n1 = (double) nums1[i];
            else if(count == n/2)
                n2 = (double) nums1[i];        
            count++;
            i++;
        }

        while(j < len2)
        {
            if(count == n/2 - 1)
                n1 = (double) nums2[j];
            else if(count == n/2)
                n2 = (double) nums2[j];
            
            count++;
            j++;
        }

        if(n % 2 == 1)
            return n2;
        
        return (n1 + n2) / 2.0;
    }
}

-----------------------------------------------------------------------
-----------------------------------------------------------------------

// Optimal Solution
Time Complexity: O(log(min(n,m))
Space Complexity: O(1) 

-----------------------------------------------------------------------
-----------------------------------------------------------------------

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // one of the hardest questions
        // uses binary search to find split point on shorter array

        int n1 = nums1.length;
        int n2 = nums2.length;

        if(n1 > n2)
            return findMedianSortedArrays(nums2,nums1);

        int n = n1 + n2;

        int low = 0;
        int high = n1;

        int left = (n1 + n2 + 1) / 2;  // works for both even and odd

        while(low <= high)
        {
            int mid1 = (low + high) / 2;
            int mid2 =  left - mid1;

            int l1 = Integer.MIN_VALUE; // when no one from nums1 on left
            int l2 = Integer.MIN_VALUE; // when no one from nums2 on left

            int r1 = Integer.MAX_VALUE; // when no one from nums1 on right
            int r2 = Integer.MAX_VALUE; // when no one from nums2 on right

            if(mid1 < n1)
                r1 = nums1[mid1];
            if(mid2 < n2)
                r2 = nums2[mid2];

            if(mid1 - 1 >=0)
                l1 = nums1[mid1 - 1];
            if(mid2 - 1 >= 0)
                l2 = nums2[mid2 - 1];
            
            if(l1 <= r2 && l2 <= r1)
            {
                if(n % 2 == 1)
                {
                    return Math.max(l1,l2);
                }
                else
                {
                    return (double) (Math.max(l1, l2) + Math.min(r1, r2)) / 2.0;
                }
            }
            else if(l1 > r2)
            {
                // more elements , right now there are too many ele(s) of nums1 in left part
                // so we need to shrink the space from right in order to have the new mid1 towards left
                // in simple all the elements from the mid1 to curr_high are not the right partition thing so exclude the 
                // search there

                high = mid1 - 1;
            }
            else
            {
                // vice-versa reason for too less ele(s) of nums1 in left part

                low = mid1 + 1;
            }

        }

        return 0.0;
    }
}
