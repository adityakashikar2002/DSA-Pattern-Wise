// Brute Approach
// Time: O(nÂ²)
// Space: O(1)
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
/**
    brute approach hoga find all subarrays with sum == goal
*/
class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        int n = nums.length;
        int count = 0;

        for(int i = 0; i < n; i++)
        {
            int sum = 0;

            for(int j = i; j < n; j++)
            {
                sum += nums[j];

                if(sum == goal)
                {
                    count++;
                }
            }
        }

        return count;
    }
}

---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
// Better Approach
// Time: O(n)
// Space: O(1)
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
/**
    better solution same count of subarrays with sum k
    jaisa hoga 
*/
class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        int n = nums.length;
        int count = 0;
        int sum = 0;

        HashMap<Integer, Integer> map = new HashMap<>();

        for(int i = 0; i < n; i++)
        {
            
            sum += nums[i];

            if(sum == goal)
                count++;
                
            if(map.containsKey(sum - goal))
            {
                count += map.get(sum - goal);
            }
            
            if(map.containsKey(sum))
            {
                map.put(sum, map.get(sum) + 1);
            }
            else
            {
                map.put(sum, 1);
            }
        }

        return count;
    }
}
