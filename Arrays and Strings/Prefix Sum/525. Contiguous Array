// Brute Approach
// Time: O(nÂ²)
// Space: O(1)
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
/**
    sabse brute force tarika hoga ki sare subarrays me jake dekho count of zeroes aur ones
*/
class Solution {
    public int findMaxLength(int[] nums) {
        int n = nums.length;
        int maxLen = 0;

        for(int i = 0; i < n; i++)
        {
            int cZeroes = 0;
            int cOnes = 0;

            for(int j = i; j < n; j++)
            {
                if(nums[j] == 0)
                    cZeroes++;
                else
                    cOnes++;

                if(cZeroes == cOnes)
                    maxLen = Math.max(maxLen, j - i + 1);
            }   
        }

        return maxLen;
    }
}
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
// Optimal Approach
// Time: O(n)
// Space: O(n)
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
/**
    dusra aur asan tarika hoga humko equal no of 0's and 1's hona rigt ??
    to agar sum sare 0's ko -1 se replace krte hai aur sum nikalte hai sabhi sub-arrays ka
    to jis bhi subarray ka sum 0 hoga, vo ek valid candidate hoga for same no. of 0's & 1's
    to apn maxLen of such array to asani se nikal skhte

    question deduce ho jaega 
    Longest Subarray with Sum 0 me
    ya Longest Subarray with Sum k (k = 0) me 
*/
class Solution {
    public int findMaxLength(int[] nums) {
        int n = nums.length;
        int maxLen = 0;
        int sum = 0;

        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, -1); // sum 0 occurs before array starts

        for (int i = 0; i < n; i++) 
        {
            sum += (nums[i] == 0) ? -1 : 1;

            if (map.containsKey(sum)) 
            {
                maxLen = Math.max(maxLen, i - map.get(sum));
            } 
            else 
            {
                map.put(sum, i);
            }
        }

        return maxLen;
    }
}
