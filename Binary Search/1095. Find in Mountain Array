Time Complexity: O(log n)
Space Complexity: O(1)
MountainArray API Calls: O(log n)
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------

/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */

class Solution {
    // Find the peak index using binary search
    public static int findPeak(MountainArray arr, int n) {
        int low = 0, high = n - 1;
        while (low <= high) 
        {
            int mid = (low + high) / 2;
            int midVal = arr.get(mid);
            int midNext = arr.get(mid + 1);

            if (midVal < midNext) {
                low = mid + 1;   // peak is to the right
            } else {
                high = mid - 1;      // peak is at mid or to the left
            }
        }
        return high; // peak pe point krega
    }

    // Binary search with ascending/descending flag
    public static int binarySearch(int low, int high, MountainArray arr, int target, boolean ascending) {
        while (low <= high) 
        {
            int mid = (low + high) / 2;
            int midVal = arr.get(mid);

            if (midVal == target)
                return mid;

            if (ascending) {
                if (midVal < target)
                    low = mid + 1;
                else
                    high = mid - 1;
            }
            else 
            {
                if (midVal > target)
                    low = mid + 1;
                else
                    high = mid - 1;
            }
        }

        return -1;
    }

    public int findInMountainArray(int target, MountainArray mountainArr) {
        int n = mountainArr.length();

        // Step 1: Find the peak
        int peak = findPeak(mountainArr, n);

        // Step 2: Search in left (ascending) part
        int left = binarySearch(0, peak, mountainArr, target, true);
        if (left != -1) 
            return left;

        // Step 3: Search in right (descending) part
        return binarySearch(peak + 1, n - 1, mountainArr, target, false);
    }
}
