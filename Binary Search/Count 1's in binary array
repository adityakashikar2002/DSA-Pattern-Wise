// Brute Force
// Time: O(n)
// Space: O(1)
----------------------------------------------------------------------------------------

class Solution {
    public int countOnes(int[] arr) {
        // code here
        
        int n = arr.length;
        
        int count = 0;
        
        for(int i = 0; i < n; i++)
        {
            if(arr[i] == 1)
                count++;
            else
                break;
        }
        
        return count;
    }
}
----------------------------------------------------------------------------------------

// Optimal Force
// Time: O(logn)
// Space: O(1)
----------------------------------------------------------------------------------------
class Solution {
    public int countOnes(int[] arr) {
        // code here
        
        int n = arr.length;
        
        int count = 0;
        
        int low = 0;
        int high = n - 1;
        
        while(low <=  high)
        {
            int mid = (low + high) / 2;
            
            if(arr[mid] == 1)
            {
                count += (mid - low + 1);
                low = mid + 1;
            }
            else if(arr[mid] == 0)
            {
                high = mid - 1;
            }
            
            
        }
        
        return count;
    }
}
