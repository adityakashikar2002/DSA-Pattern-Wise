// Brute Approach
// Time: O(n)
// Space: O(1)
---------------------------------------------------------------------------------------
class Solution {
    int upperBound(int[] arr, int target) {
        // code here
        int ans = arr.length;
        
        for(int i = 0; i < arr.length; i++)
        {
            if(arr[i] > target)
            {
                ans = i;
                break;
            }
        }
        
        return ans;
    }
}
---------------------------------------------------------------------------------------
// Optimal Approach
// Time: O(logn)
// Space: O(1)
---------------------------------------------------------------------------------------
class Solution {
    int upperBound(int[] arr, int target) {
        // code here
        int ans = arr.length;
        
        int low = 0;
        int high = arr.length - 1;
        
        while(low <= high)
        {
            int mid = (low + high) / 2;
            
            if(arr[mid] > target)
            {
                ans = mid;
                high = mid - 1;
            }
            else
            {
                low = mid + 1;
            }
        }
        
        return ans;
    }
}

