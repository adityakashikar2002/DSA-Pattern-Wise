// Time:- O(log(n * m))
// Space:- O(1)
-----------------------------------------------------------------------------------------------------------------------------
class Solution {
    public boolean searchMatrix(int[][] mat, int x) {
        // code here
        int n = mat.length;
        int m = mat[0].length;
        
        int low = 0;
        int high = (n * m) - 1;
        
        // bs sahi tha matrix ko 1D Array me visualize krna tha aur binary search lagana tha on that 1D rotated sorted array
        while(low <= high)
        {
            int mid = (low + high) / 2;
            
            int r = mid / m;
            int c = mid % m;
            
            if(mat[r][c] == x)
                return true;
            
            if(mat[low / m][low % m] <= mat[r][c])
            {
                if(x >= mat[low / m][low % m] && x <= mat[r][c])
                {
                    high = mid - 1;
                }
                else
                {
                    low = mid + 1;
                }
            }
            else
            {
                if(x >= mat[r][c] && x <= mat[high / m][high % m])
                {
                    low = mid + 1;
                }
                else
                {
                    high = mid - 1;
                }
            }
        }
        
        return false;
    }
}
