// Time:- O(log n)
// Space:- O(1)
----------------------------------------------------------------------------------------------------------------------
class Solution {
    public int findMin(int[] nums) {
        int n = nums.length;

        int minEle = Integer.MAX_VALUE;

        int low = 0;
        int high = n - 1;

        while(low <= high)
        {
            int mid = (low + high) / 2;

            if(nums[low] <= nums[high])
            {
                minEle = Math.min(minEle, nums[low]);
                break;
            }
            
            if(nums[low] <= nums[mid]) // left part sorted so minEle may or may not be here so pick smallest and eliminate
            {
                minEle = Math.min(minEle, nums[low]);
                low = mid + 1;
            }
            else
            {
                minEle = Math.min(minEle, nums[mid]); // pick smallest and eliminate
                high = mid - 1;
            }

        }

        return minEle;
    }
}
