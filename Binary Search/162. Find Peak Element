// Brute Force
// Time: O(n)
// Space: O(1)
-------------------------------------------------------------------------------
class Solution {
    public int findPeakElement(int[] nums) {
        int n = nums.length;
        int index = -1;

        for(int i = 0; i < n; i++)
        {
            if(i == 0)
            {
                if(nums[i] > nums[i + 1])
                    index = i;
            }
            else if(i == n - 1)
            {
                if(nums[i] > nums[i - 1])
                    index = i;
            }
            else
            {
                if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1])
                    index = i;
            }
        }

        return index;
    }
}

-------------------------------------------------------------------------------
// Optimal Solution
// Time: O(log n)
// Space: O(1)
-------------------------------------------------------------------------------

class Solution {
    public int findPeakElement(int[] nums) {
        // simple idea hai visualize kro
        //        /\
        //       /  \
        //      /    \
        //     /      \
        //    /        \
        //   /          \
        //  /            \
        // /              \

        // for one peak dekhte hai
        // agar low aur high lekar nikala , to mid ki vale m < m + 1 matlab increasing height me hai, so peak right ko hai low ko badao
        // agar m > m + 1 hua matlab decrease height me hua , to high to reduce krenge kyuki peak left me hai

        //            /\                  /\                  /\
        //           /  \                /  \                /  \
        //          /    \              /    \              /    \
        //         /      \            /      \            /      \
        //        /        \          /        \          /        \
        //       /          \        /          \        /          \
        //      /            \      /            \      /            \
        //     /              \    /              \    /              \
        //    /                \  /                \  /                \
        //   ------------------------------------------------------------

        // agar multiples peaks bhi bote hai to bhi apn kisi ko bhi reject mark aage badh skhte
        // islye kuch tension nhi kaha mid hai bss single peak vala case yaad rakh k ho jaega

        int n = nums.length;
        int index = -1;

        if(n == 1)    // edge case , agar ek hi element hai to vo peak hai
            return 0;

        // agar 1st aur last element peak element hai;
        if(nums[0] > nums[1])
            return 0;
        
        if(nums[n - 1] > nums[n - 2])
            return n - 1;
        
        // agar upar k cases nhi hai answer to peak inke bich me hai

        int low = 1;
        int high = n - 2;

        while(low <= high)
        {
            int mid = (low + high) / 2;

            if(nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1]) // dono se bada hai to peak hai
            {
                return mid;
            }
            else if(nums[mid] < nums[mid + 1]) // agar increasing half me hai peak right ko milega
            {
                low = mid + 1;
            }
            else                               // agar decreasing half me hai to peak left me milega
                high = mid - 1;
        }

        return -1;
    }
}
