Time Complexity: O(log n) on average, O(n) in worst case (due to duplicates).
Space Complexity: O(1)
-------------------------------------------------------------------------------------------------

class Solution {
    public int findMin(int[] nums) {
        int n = nums.length;

        int low = 0;
        int high = n - 1;

        int minEle = Integer.MAX_VALUE;

        while(low <= high)
        {
            int mid = (low + high) / 2;

            if(nums[low] == nums[mid] && nums[mid] == nums[high]) // for duplicates 
            {
                minEle = Math.min(minEle, nums[low]);;
                low++;
                high--;
            }
            else if(nums[low] <= nums[mid])
            {
                minEle = Math.min(minEle, nums[low]);
                low = mid + 1;
            }
            else
            {
                minEle = Math.min(minEle, nums[mid]);
                high = mid - 1;
            }
        }

        return minEle;
    }
}
