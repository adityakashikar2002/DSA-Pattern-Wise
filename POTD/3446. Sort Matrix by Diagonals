// Time: O(n² + n²logn + n²) ~ O(n² * log n)
// Space: O(n²)
----------------------------------------------------------------------------------------------
class Solution {
    public int[][] sortMatrix(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;

        HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();

        for(int r = 0; r < rows; r++)
        {
            for(int c = 0; c < cols; c++)
            {
                if(map.containsKey(r - c))
                {
                    map.get(r - c).add(grid[r][c]);
                }
                else
                {
                    map.put(r - c, new ArrayList<>());
                    map.get(r - c).add(grid[r][c]);
                }
            }
        }

        int startDiagonal = 0 - (cols - 1);
        int endDiagonal = Math.abs(startDiagonal);

        for(int d = startDiagonal; d <= endDiagonal; d++)
        {
            ArrayList<Integer> list = map.get(d);

            if(d < 0)
            {
                Collections.sort(list);
            }
            else
            {
                Collections.sort(list, Collections.reverseOrder());
            }
        }

        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                int key = r - c;
                grid[r][c] = map.get(key).remove(0);
            }
        }

        return grid;
    }
}
