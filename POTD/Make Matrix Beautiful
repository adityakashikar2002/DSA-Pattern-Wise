Make Matrix Beautiful - 
Time : O(n^2)
Space: O(1)
----------------------------------------------------------------
class Solution {
    public static int balanceSums(int[][] mat) {
        // code here
        int n = mat.length;
        int res = 0;
        int maxSum = 0;

        // Find maximum sum across all rows
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += mat[i][j];
            }
            maxSum = Math.max(sum, maxSum);
        }

        // Find maximum sum across all columns
        for (int j = 0; j < n; j++) {
            int sum = 0;
            for (int i = 0; i < n; i++) {
                sum += mat[i][j];
            }
            maxSum = Math.max(sum, maxSum);
        }

        // Sum of operations across all rows
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += mat[i][j];
            }
            res += (maxSum - sum);
        }
        return res;
    }
}
------------------------------------------------------------------------
res += (maxSum - sum);

for every row, you get the total number of required operations across the entire matrix.

âœ… Why does this work?
Because for a square matrix, if every row sum is equal to maxSum, and we only do increment operations, 
then automatically the column sums also become equal to maxSum at the end (since rows and columns are symmetric in a square matrix of size n x n).
