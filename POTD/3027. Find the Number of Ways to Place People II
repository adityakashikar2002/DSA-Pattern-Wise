// Brute Force Approach

Time Complexity: O(n³) 
Space Complexity: O(1)
-----------------------------------------------------------------------------------------------------
class Solution {
    public int numberOfPairs(int[][] points) {
        // simple idea hai
        // ek point lo, aisa point dhoondo jo lower right me ho
        // agar mila to check kro un points se bane ractangle me koi 3rd point nhi hona chaiye, boundary pe bhi nahi
        int count = 0;

        int n = points.length;

        for(int i = 0; i < n; i++)
        {
            int x1 = points[i][0];
            int y1 = points[i][1];

            for(int j = 0; j < n; j++)
            {
                if(i == j)
                    continue;
                
                int x2 = points[j][0];
                int y2 = points[j][1];

                if(x2 >= x1 && y2 <= y1)
                {
                    boolean valid = true;
                    for(int k = 0; k < n; k++)
                    {
                        if(k == i || k == j)
                        {
                            continue;
                        }

                        int x3 = points[k][0];
                        int y3 = points[k][1];

                        if(x3 <= x2 && x3 >= x1 && y3 >= y2 && y3 <= y1)
                        {
                            valid = false;
                            break;
                        }

                    }

                    if(valid)
                        count++;
                }
                
            }
        }

        return count;
    }
}
-----------------------------------------------------------------------------------------------------
// Optimal Approach

Time Complexity -
Sorting: O(n log n)
Nested loops: O(n²)
Overall = O(n²) (since n² dominates n log n).

Time Complexity: O(n²) 
Space Complexity: O(1)
-----------------------------------------------------------------------------------------------------

class Solution {
    public int numberOfPairs(int[][] points) {
        // simple idea hai
        // ek point lo, aisa point dhoondo jo lower right me ho
        // agar mila to check kro un points se bane ractangle me koi 3rd point nhi hona chaiye, boundary pe bhi nahi

        // agar hum array ko sort kr de based on x coordinate as ascending order apn ko x2 hamesha bada hi rahega bss y2 ka check krna padega
        // lekin agar dono x1. x2 same aa gaye to hame y2 hamesha bada hona so agar same aya to y2, y1 ko descending me lenge
        
        Arrays.sort(points, (a, b) -> {
            if(a[0] == b[0])
                return Integer.compare(b[1], a[1]);
            
            return Integer.compare(a[0], b[0]);
        });

        int count = 0;

        int n = points.length;

        for(int i = 0; i < n; i++)
        {
            int x1 = points[i][0];
            int y1 = points[i][1];

            int maxY = Integer.MIN_VALUE; // yee k loop ko hata dega , yee bataega ki konsa point valid hai

            for(int j = i + 1; j < n; j++)
            {

                int x2 = points[j][0];
                int y2 = points[j][1];

                if(y2 > y1)  // uppar chala gaya, apn ko lower right hona
                    continue;

                if(y2 > maxY) // agar yee hua matlab in dono points k beech me jitne bhi points lie kr rahe vo sare uss rectangle se baher haai
                {
                    count++;
                    maxY = y2;
                }              
            }   
        }

        return count;
    }
}
