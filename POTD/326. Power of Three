// Time:- O(logâ‚ƒ n)
// Space;- O(1)
---------------------------------------------------------------------------

class Solution {
    public boolean isPowerOfThree(int n) {
        if(n < 1) // least is 3^0 = 1 so
            return false;

        while(n % 3 == 0)   // while n is divisible by 3 
        {
            n = n / 3;
        }

        if(n == 1)        // at last 3 / 3 will be 1 so true , a power of 3
            return true;
        
        return false;
    }
}

---------------------------------------------------------------------------
// Time: O(1)
// Space: O(1)
---------------------------------------------------------------------------

Math-based check (fastest & simplest)
Since 3^19 = 1162261467 is the largest power of 3 that fits in a 32-bit signed int:
class Solution{
    public boolean isPowerOfThree(int n) {
      return n > 0 && 1162261467 % n == 0;
    }
}
