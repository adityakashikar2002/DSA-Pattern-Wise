// Brute
Time Complexity: O(N^2)

Space Complexity: O(1)

------------------------------
class Solution {
    public int maxCircularSum(int arr[]) {
        // code here
        int n = arr.length;
        
        int maxSum = Integer.MIN_VALUE;
        for(int i = 0; i < n; i++)
        {
            int sum = 0;
            
            for(int j = i; j < n; j++)
            {
                sum = sum + arr[j];
                maxSum = Math.max(sum, maxSum);
            }
            
            for(int k = 0; k < i; k++)
            {
                sum = sum + arr[k];
                maxSum = Math.max(sum, maxSum);
            }
        }
        
        return maxSum;
    }
}

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
// Optimized
Time Complexity: O(N)

Space Complexity: O(1)
------------------------------------------------------------------------------------
class Solution {
    public int maxCircularSum(int arr[]) {
        // code here
        int totalSum = 0;
        
        //Step 1 Calculate totalSum
        
        for(int i = 0; i < arr.length; i++)
            totalSum += arr[i];
        
        //Step 2 Calculate minSum and maxSum
        
        int minSum = kadaneMin(arr);
        
        int maxSum = kadaneMax(arr);
        
        // Step 3 Calculate circularSum
        
        int circularMaxSum = totalSum - minSum;
        
        if(maxSum > 0)
            return circularMaxSum;
        
        return maxSum;
    }
    
    public static int kadaneMin(int arr[])
    {
        int sum = 0;
        int minSum = Integer.MAX_VALUE;
        
        for(int i = 0; i < arr.length; i++)
        {
            sum = Math.min(sum + arr[i], arr[i]);
            minSum = Math.min(minSum, sum);
        }
        
        return minSum;
    }
    
    public static int kadaneMax(int arr[])
    {
        int sum = 0;
        int maxSum = Integer.MIN_VALUE;
        
        for(int i = 0; i < arr.length; i++)
        {
            sum = Math.max(sum + arr[i], arr[i]);
            maxSum = Math.max(maxSum, sum);
        }
        
        return maxSum;
    }
}
