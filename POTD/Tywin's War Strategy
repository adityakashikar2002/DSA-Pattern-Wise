// Time Complexity: O(n log n)
// Space Complexity: O(n)
------------------------------------------------------------------
class Solution {
    public int minSoldiers(int[] arr, int k) {
        // code here
        if(k == 1) // if k is 1 , all troops are already lucky
            return 0;
        
        int n = arr.length;
        
        int lucky = 0;
        
        for(int i = 0; i < n; i++) // first let's find lucky troops
        {
            if(arr[i] % k == 0)
                lucky++;
        }
        
        if(lucky > n / 2)       // if troops are already lucky no need
            return 0;
        
        int unlucky = 0;        // this will tell how many troops are needed to make lucky, remaining ones
        
        if(n % 2 == 0)         // for even len
        {
            unlucky = n / 2 - lucky;
        }
        else                    // for odd len
        {
            unlucky = (n / 2) + 1 - lucky;
        }
        
        int[] soldiers = new int[n];  // will tells how many soldiers are needed to be added to the ith troop
        
        for(int i = 0; i< n; i++)
        {
            if(arr[i] < k)
            {
                soldiers[i] = k - arr[i]; 
            }
            else
            {
                soldiers[i] = k - (arr[i] % k);
            }
        }
        
        Arrays.sort(soldiers);    // sort for easy
        
        int minSoldiers = 0;
        
        for(int i = 0; i < unlucky; i++)  // just add the min Soldiers, for unlucky troops
        {
            if(soldiers[i] != 0)
            {
                minSoldiers += soldiers[i];
            }
            
        }
        
        return minSoldiers;
    }
}
